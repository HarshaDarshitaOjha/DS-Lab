/* 4.1 Write a program to create a single linked list of n nodes and perform the following menu-based operations on it using function:
    i. Insert a node at specific position
    ii. Deletion of an element from specific position
    iii. Count nodes
    iv. Traverse the linked list
*/

#include <stdio.h>
#include <stdlib.h>

// Node structure
struct node {
    int data;
    struct node* next;
};

struct node* head = NULL;

// Function to create initial linked list
void createlist(int n) {
    if (n <= 0) {
        printf("Invalid number of nodes.\n");
        return;
    }

    head = (struct node*)malloc(sizeof(struct node));
    if (head == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }

    int data;
    printf("Enter data for node 1: ");
    scanf("%d", &data);
    head->data = data;
    head->next = NULL;

    struct node* temp = head;
    for (int i = 2; i <= n; i++) {
        struct node* newnode = (struct node*)malloc(sizeof(struct node));
        if (newnode == NULL) {
            printf("Memory allocation failed.\n");
            return;
        }
        printf("Enter data for node %d: ", i);
        scanf("%d", &data);
        newnode->data = data;
        newnode->next = NULL;

        temp->next = newnode;
        temp = newnode;
    }
}

// Traverse function
void traverse() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct node* temp = head;
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Insert at a specific position
void insertatposition(int data, int position) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory not allocated.\n");
        return;
    }

    newnode->data = data;
    newnode->next = NULL;

    if (position < 1) {
        printf("Invalid position.\n");
        free(newnode);
        return;
    }

    if (position == 1) {
        newnode->next = head;
        head = newnode;
    } else {
        struct node* temp = head;
        for (int i = 1; i < position - 1 && temp != NULL; i++) {
            temp = temp->next;
        }
        if (temp == NULL) {
            printf("Position out of range.\n");
            free(newnode);
            return;
        }
        newnode->next = temp->next;
        temp->next = newnode;
    }

    printf("Node inserted at position %d.\n", position);
    traverse();
}

// Delete at a specific position
void deleteatposition(int position) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct node* temp = head;

    if (position == 1) {
        head = head->next;
        free(temp);
        printf("Node at position 1 deleted.\n");
        traverse();
        return;
    }

    struct node* prev = NULL;
    for (int i = 1; i < position && temp != NULL; i++) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Position out of range.\n");
        return;
    }

    prev->next = temp->next;
    free(temp);
    printf("Node at position %d deleted.\n", position);
    traverse();
}

// Count nodes
int countnodes() {
    int count = 0;
    struct node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    return count;
}

// Main Menu
int main() {
    int choice, n, data, position;

    printf("Enter number of nodes: ");
    scanf("%d", &n);
    createlist(n);
    traverse();

    while (1) {
        printf("\n--- Menu ---\n");
        printf("1. Insert at position\n");
        printf("2. Delete at position\n");
        printf("3. Count nodes\n");
        printf("4. Traverse\n");
        printf("5. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data and position: ");
                scanf("%d %d", &data, &position);
                insertatposition(data, position);
                break;

            case 2:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                deleteatposition(position);
                break;

            case 3:
                printf("Number of nodes = %d\n", countnodes());
                break;

            case 4:
                traverse();
                break;

            case 5:
                exit(0);

            default:
                printf("Invalid choice!\n");
        }
    }
}

Input:

Enter number of nodes: 4
Enter data for node 1: 17
Enter data for node 2: 34
Enter data for node 3: 44
Enter data for node 4: 51
Linked List: 17 -> 34 -> 44 -> 51 -> NULL

--- Menu ---
1. Insert at position
2. Delete at position
3. Count nodes
4. Traverse
5. Exit
Enter choice: 1
Enter data and position: 66 2
Node inserted at position 2.
Linked List: 17 -> 66 -> 34 -> 44 -> 51 -> NULL

--- Menu ---
1. Insert at position
2. Delete at position
3. Count nodes
4. Traverse
5. Exit
Enter choice: 5

----------------------------------------------------------------------------------------
/* 4.2 In addition to 4.1, perform following operations using function on the single linked list:
    i. search an element in the list
    ii. sort the list in ascending order
    iii. reverse the list
*/

#include <stdio.h>
#include <stdlib.h>

// Node structure
struct node {
    int data;
    struct node* next;
};

struct node* head = NULL;

// Function to create initial linked list
void createlist(int n) {
    if (n <= 0) {
        printf("Invalid number of nodes.\n");
        return;
    }

    head = (struct node*)malloc(sizeof(struct node));
    if (head == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }

    int data;
    printf("Enter data for node 1: ");
    scanf("%d", &data);
    head->data = data;
    head->next = NULL;

    struct node* temp = head;
    for (int i = 2; i <= n; i++) {
        struct node* newnode = (struct node*)malloc(sizeof(struct node));
        if (newnode == NULL) {
            printf("Memory allocation failed.\n");
            return;
        }
        printf("Enter data for node %d: ", i);
        scanf("%d", &data);
        newnode->data = data;
        newnode->next = NULL;

        temp->next = newnode;
        temp = newnode;
    }
}

// Traverse
void traverse() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct node* temp = head;
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Insert at a specific position
void insertatposition(int data, int position) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory not allocated.\n");
        return;
    }

    newnode->data = data;
    newnode->next = NULL;

    if (position < 1) {
        printf("Invalid position.\n");
        free(newnode);
        return;
    }

    if (position == 1) {
        newnode->next = head;
        head = newnode;
    } else {
        struct node* temp = head;
        for (int i = 1; i < position - 1 && temp != NULL; i++) {
            temp = temp->next;
        }
        if (temp == NULL) {
            printf("Position out of range.\n");
            free(newnode);
            return;
        }
        newnode->next = temp->next;
        temp->next = newnode;
    }

    printf("Node inserted at position %d.\n", position);
    traverse();
}

// Delete at a specific position
void deleteatposition(int position) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct node* temp = head;

    if (position == 1) {
        head = head->next;
        free(temp);
        printf("Node at position 1 deleted.\n");
        traverse();
        return;
    }

    struct node* prev = NULL;
    for (int i = 1; i < position && temp != NULL; i++) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Position out of range.\n");
        return;
    }

    prev->next = temp->next;
    free(temp);
    printf("Node at position %d deleted.\n", position);
    traverse();
}

// Count nodes
int countnodes() {
    int count = 0;
    struct node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    return count;
}

// Search an element
void search(int key) {
    struct node* temp = head;
    int position = 1;
    while (temp != NULL) {
        if (temp->data == key) {
            printf("Element %d found at position %d.\n", key, position);
            return;
        }
        temp = temp->next;
        position++;
    }
    printf("Element %d not found in the list.\n", key);
}

// Sort the list (ascending)
void sortlist() {
    if (head == NULL || head->next == NULL) {
        printf("List too small to sort.\n");
        return;
    }

    struct node* i, *j;
    int temp;
    for (i = head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
    printf("List sorted in ascending order.\n");
    traverse();
}

// Reverse the list
void reverselist() {
    struct node* prev = NULL;
    struct node* current = head;
    struct node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    head = prev;
    printf("List reversed.\n");
    traverse();
}

// Main Menu
int main() {
    int choice, n, data, position, key;

    printf("Enter number of nodes: ");
    scanf("%d", &n);
    createlist(n);
    traverse();

    while (1) {
        printf("\n--- Menu ---\n");
        printf("1. Insert at position\n");
        printf("2. Delete at position\n");
        printf("3. Count nodes\n");
        printf("4. Traverse\n");
        printf("5. Search element\n");
        printf("6. Sort list (ascending)\n");
        printf("7. Reverse list\n");
        printf("8. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data and position: ");
                scanf("%d %d", &data, &position);
                insertatposition(data, position);
                break;

            case 2:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                deleteatposition(position);
                break;

            case 3:
                printf("Number of nodes = %d\n", countnodes());
                break;

            case 4:
                traverse();
                break;

            case 5:
                printf("Enter element to search: ");
                scanf("%d", &key);
                search(key);
                break;

            case 6:
                sortlist();
                break;

            case 7:
                reverselist();
                break;

            case 8:
                exit(0);

            default:
                printf("Invalid choice!\n");
        }
    }
}

Input:

Enter number of nodes: 4
Enter data for node 1: 17
Enter data for node 2: 34
Enter data for node 3: 44
Enter data for node 4: 51
Linked List: 17 -> 34 -> 44 -> 51 -> NULL

--- Menu ---
1. Insert at position
2. Delete at position
3. Count nodes
4. Traverse
5. Search element
6. Sort list (ascending)
7. Reverse list
8. Exit
Enter choice: 5
Enter element to search: 44
Element 44 found at position 3.

--- Menu ---
1. Insert at position
2. Delete at position
3. Count nodes
4. Traverse
5. Search element
6. Sort list (ascending)
7. Reverse list
8. Exit
Enter choice: 8

----------------------------------------------------------------------------------------

/* 4.3 Write a program to represent the polynomial equation of single variable using single 
linked list and perform the addition of two polynomial equations. */

#include <stdio.h>
#include <stdlib.h>

// Node structure for polynomial
struct node {
    int coeff;
    int pow;
    struct node* next;
};

// Function to create a new node
struct node* createNode(int coeff, int pow) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->coeff = coeff;
    newnode->pow = pow;
    newnode->next = NULL;
    return newnode;
}

// Function to insert node at end of polynomial
void insertNode(struct node** poly, int coeff, int pow) {
    struct node* newnode = createNode(coeff, pow);

    if (*poly == NULL) {
        *poly = newnode;
        return;
    }

    struct node* temp = *poly;
    while (temp->next != NULL)
        temp = temp->next;

    temp->next = newnode;
}

// Function to display polynomial
void display(struct node* poly) {
    if (poly == NULL) {
        printf("0");
        return;
    }

    while (poly != NULL) {
        printf("%dx^%d", poly->coeff, poly->pow);
        poly = poly->next;
        if (poly != NULL)
            printf(" + ");
    }
    printf("\n");
}

// Function to add two polynomials
struct node* addPolynomials(struct node* poly1, struct node* poly2) {
    struct node* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->pow > poly2->pow) {
            insertNode(&result, poly1->coeff, poly1->pow);
            poly1 = poly1->next;
        }
        else if (poly1->pow < poly2->pow) {
            insertNode(&result, poly2->coeff, poly2->pow);
            poly2 = poly2->next;
        }
        else {  // powers equal
            int sum = poly1->coeff + poly2->coeff;
            if (sum != 0)  // avoid zero terms
                insertNode(&result, sum, poly1->pow);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // If remaining terms in poly1
    while (poly1 != NULL) {
        insertNode(&result, poly1->coeff, poly1->pow);
        poly1 = poly1->next;
    }

    // If remaining terms in poly2
    while (poly2 != NULL) {
        insertNode(&result, poly2->coeff, poly2->pow);
        poly2 = poly2->next;
    }

    return result;
}

// Main function
int main() {
    struct node* poly1 = NULL;
    struct node* poly2 = NULL;
    struct node* sum = NULL;

    int n1, n2, coeff, pow;

    printf("Enter number of terms in first polynomial: ");
    scanf("%d", &n1);
    for (int i = 0; i < n1; i++) {
        printf("Enter coeff and power for term %d: ", i + 1);
        scanf("%d %d", &coeff, &pow);
        insertNode(&poly1, coeff, pow);
    }

    printf("Enter number of terms in second polynomial: ");
    scanf("%d", &n2);
    for (int i = 0; i < n2; i++) {
        printf("Enter coeff and power for term %d: ", i + 1);
        scanf("%d %d", &coeff, &pow);
        insertNode(&poly2, coeff, pow);
    }

    printf("\nFirst Polynomial: ");
    display(poly1);

    printf("Second Polynomial: ");
    display(poly2);

    sum = addPolynomials(poly1, poly2);

    printf("\nSum of Polynomials: ");
    display(sum);

    return 0;
}

Input:

Enter number of terms in first polynomial: 3
Enter coeff and power for term 1: 2 2
Enter coeff and power for term 2: 3 1
Enter coeff and power for term 3: 4 0
Enter number of terms in second polynomial: 3
Enter coeff and power for term 1: 4 2
Enter coeff and power for term 2: 3 1
Enter coeff and power for term 3: 2 0

First Polynomial: 2x^2 + 3x^1 + 4x^0
Second Polynomial: 4x^2 + 3x^1 + 2x^0

Sum of Polynomials: 6x^2 + 6x^1 + 6x^0