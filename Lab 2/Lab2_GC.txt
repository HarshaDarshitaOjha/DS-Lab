/*2.1 WAP to create a 1-D array of n elements and perform the following menu based operations using
function.
a. insert a given element at specific position.
b. delete an element from a specific position of the array.
c. linear search to search an element
d. traversal of the array*/

#include <stdio.h>

int main()
{
    int n;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);
    int arr[n];

    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }
    printf("\n");

    // Menu based operations
    printf("Menu:\n");
    printf("a - Insert an element at a specific position\n");
    printf("b - Delete an element from a specific position\n");
    printf("c - Search for an element using linear search\n");
    printf("d - Traverse the array\n");
    printf("Choose an operation (a/b/c/d): ");
    char choice;
    scanf(" %c", &choice);

    switch (choice)
    {
        case 'a':
            printf("You chose to insert an element.\n");
            break;
        case 'b':
            printf("You chose to delete an element.\n");
            break;
        case 'c':
            printf("You chose to search for an element.\n");
            break;
        case 'd':
            printf("You chose to traverse the array.\n");
            break;
        default:
            printf("Invalid choice!\n");
            return 1;
    }
    printf("\n");

    if(choice == 'a')
    {
        // a - insert a given element at specific position
        int element0, position0;
        printf("Enter the element to insert and the position: ");
        scanf("%d %d", &element0, &position0);
        if (position0 < 0 || position0 > n)
        {
            printf("Invalid position!\n");
        }
        else
        {
            for (int i = n; i > position0; i--)
            {
                arr[i] = arr[i - 1];
            }
            arr[position0] = element0;
            n++;
            printf("Element inserted successfully.\n");
        }
        printf("Array after insertion:\n");
        for (int i = 0; i < n; i++)
        {
            printf("%d ", arr[i]);
        }
        printf("\n");    
    }

    else if(choice == 'b')
    {
        // b - delete an element from a specific position
        int element1, position1;
        printf("Enter the position of the element to delete: ");
        scanf("%d", &position1);
        if (position1 < 0 || position1 >= n)
        {
            printf("Invalid position!\n");
        }
        else
        {
            for (int i = position1; i < n - 1; i++)
            {
                arr[i] = arr[i + 1];
            }
            n--;
            printf("Element deleted successfully.\n");
        }
        printf("Array after deletion:\n");
        for (int i = 0; i < n; i++)
        {
            printf("%d ", arr[i]);
        }
        printf("\n");
    }

    else if(choice == 'c')
    {
        // c - linear search to search an element
        int element2;
        printf("Enter the element to search: ");
        scanf("%d", &element2);
        int found = 0;
        for (int i = 0; i < n; i++)
        {
            if (arr[i] == element2)
            {
                found = 1;
                printf("Element %d found at position %d.\n", element2, i);
                break;
            }
        }
        if (!found)
        {
            printf("Element %d not found in the array.\n", element2);
        }
    }

    else if (choice == 'd')
    {
        // d - traversal of the array
        printf("Array elements:\n");
        for (int i = 0; i < n; i++)
        {
            printf("%d ", arr[i]);
        }
        printf("\n");
    }

    return 0;


}

Input:
Enter the number of elements in the array: 5
Enter the elements of the array:
10 23 45 37 52

Menu:
a - Insert an element at a specific position
b - Delete an element from a specific position
c - Search for an element using linear search
d - Traverse the array
Choose an operation (a/b/c/d): a
You chose to insert an element.

Enter the element to insert and the position: 61 2

Output:
Element inserted successfully.
Array after insertion:
10 23 61 45 37 52

-----------------------------------------------------------------------------

/*2.2 Write a program to perform the following operations on a given square matrix using functions:
i. Find the no.of nonzero elements
ii. Display upper triangular matrix
iii. Display the elements of just above and below the main diagonal*/

#include <stdio.h>

int main()
{
    int n;
    printf("Enter the size of the square matrix (n x n): ");
    scanf("%d", &n);
    int matrix[n][n];

    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }

    // Count non-zero elements
    int nonzero_count = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (matrix[i][j] != 0)
            {
                nonzero_count++;
            }
        }
    }
    printf("Number of non-zero elements: %d\n", nonzero_count);

    // Display upper triangular matrix
    printf("Upper triangular matrix:\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (j >= i)
                printf("%d ", matrix[i][j]);
            else
                printf("  ");
        }
        printf("\n");
    }

    // Display elements just above and below the main diagonal
    printf("Elements just above and below the main diagonal:\n");
    for (int i = 0; i < n - 1; i++)
    {
        printf("Above: %d, Below: %d\n", matrix[i][i + 1], matrix[i + 1][i]);
    }

    return 0;
}

Input:
Enter the size of the square matrix (n x n): 4
Enter the elements of the matrix:
1 0 2 4 5 0 6 7 1 3 2 4 6 9 7 8

Output:
Number of non-zero elements: 14
Upper triangular matrix:
1 0 2 4
  0 6 7
    2 4
      8
Elements just above and below the main diagonal:
Above: 0, Below: 5
Above: 6, Below: 3
Above: 4, Below: 7

-----------------------------------------------------------------------------

/*2.3 WAP to represent a given sparse matrix in 3-tuple format using 2-D array.*/

#include <stdio.h>

int main()
{
    int m, n;
    printf("Enter the number of rows and columns of the sparse matrix: ");
    scanf("%d %d", &m, &n);

    int matrix[m][n];

    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }

    // Matrix 
    printf("Matrix entered:\n");
    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    // Count non-zero elements and prepare 3-tuple representation
    int nonzero_count = 0;
    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (matrix[i][j] != 0)
            {
                nonzero_count++;
            }
        }
    }

    // Create a 3-tuple representation
    int tuple[nonzero_count + 1][3];
    tuple[0][0] = m; // Number of rows
    tuple[0][1] = n; // Number of columns
    tuple[0][2] = nonzero_count; // Number of non-zero elements

    int index = 1;
    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (matrix[i][j] != 0)
            {
                tuple[index][0] = i; // Row index
                tuple[index][1] = j; // Column index
                tuple[index][2] = matrix[i][j]; // Value
                index++;
            }
        }
    }

    // Display the 3-tuple representation
    printf("3-tuple representation of the sparse matrix:\n");
    for (int i = 0; i <= nonzero_count; i++)
    {
        printf("%d %d %d\n", tuple[i][0], tuple[i][1], tuple[i][2]);
    }

    return 0;

}

Input:
Enter the number of rows and columns of the sparse matrix: 4 5
Enter the elements of the matrix:
0 0 33 0 0 0 17 0 0 0 0 0 0 46 0 0 0 0 0 51

Output:
Matrix entered:
0 0 33 0 0
0 17 0 0 0
0 0 0 46 0
0 0 0 0 51
3-tuple representation of the sparse matrix:
4 5 4
0 2 33
1 1 17
2 3 46
3 4 51